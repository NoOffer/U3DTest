#pragma kernel CSMain

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
RWTexture2D<float4> Result;

static const float maxDist = 50;
static const float minDist = 1e-2;
static const float maxStep = 100;

struct Ray
{
    float3 origin;
    float3 dir;
};

Ray CreateCamRay(float2 uv)
{
    Ray ray;
    ray.origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    ray.dir = mul(_CameraInverseProjection, float4(uv * 2 - 1, 0, 1)).xyz;
    ray.dir = normalize(mul(_CameraToWorld, float4(ray.dir, 0)).xyz);
    return ray;
}

float GetDist(float3 pos)
{
    float sphereDist = length(pos - float3(0, 1, 0)) - 1;
    float planeDist = pos.y;
    return min(sphereDist, planeDist);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get Camera Ray
    float width, height;
    Result.GetDimensions(width, height);
    Ray ray = CreateCamRay(id.xy / float2(width, height));
    
    // Ray Marcher
    float depth = 0;
    for (int i = 0; i < maxStep; i++)
    {
        float dist = GetDist(ray.origin + ray.dir * depth);
        if (dist < minDist)
        {
            break;
        }
        
        depth += dist;
        if (depth > maxDist)
        {
            depth = maxDist;
            break;
        }
    }

    depth /= maxDist;
    Result[id.xy] = float4(depth, depth, depth, 1);
}
